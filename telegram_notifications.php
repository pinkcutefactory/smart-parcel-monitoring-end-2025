<?php
// telegram_notifications.php - ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Telegram
require_once 'telegram_config.php';
require_once 'config.php';

class TelegramNotifications {
    private $telegram;
    private $db;
    private $notifications_enabled = true;
    private $last_notification_time = [];
    private $notification_cooldown = 300; // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
    
    public function __construct() {
        $this->telegram = new TelegramConfig();
        
        $database = new DatabaseConfig();
        $this->db = $database->getConnection();
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Telegram (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
        $this->createTelegramTable();
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Telegram notifications
    private function createTelegramTable() {
        try {
            $query = "CREATE TABLE IF NOT EXISTS telegram_notifications (
                id INT AUTO_INCREMENT PRIMARY KEY,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                notification_type VARCHAR(50) NOT NULL,
                message TEXT NOT NULL,
                chat_id VARCHAR(50),
                status ENUM('sent', 'failed', 'pending') DEFAULT 'pending',
                telegram_message_id INT NULL,
                retry_count INT DEFAULT 0,
                last_retry DATETIME NULL,
                error_message TEXT NULL
            )";
            
            $this->db->exec($query);
        } catch (Exception $e) {
            error_log("Error creating Telegram table: " . $e->getMessage());
        }
    }
    
    // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    public function sendNotification($type, $message, $priority = 'normal') {
        if (!$this->notifications_enabled) {
            return false;
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Cooldown
        if ($this->isInCooldown($type)) {
            return false;
        }
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° Emoji ‡πÅ‡∏•‡∏∞ formatting ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        $formatted_message = $this->formatMessage($type, $message, $priority);
        
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        $result = $this->telegram->sendToMultiple($formatted_message);
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        $this->logNotification($type, $message, $result);
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤ Cooldown
        $this->last_notification_time[$type] = time();
        
        return $result;
    }
    
    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏ï‡πá‡∏°
    public function notifyBoxFull($distance, $lamp_status) {
        $message = "üö® <b>‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß!</b>\n\n";
        $message .= "üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: <code>{$distance} ‡∏ã‡∏°.</code>\n";
        $message .= "üí° ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏ü: <code>{$lamp_status}</code>\n";
        $message .= "‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: <code>" . date('Y-m-d H:i:s') . "</code>\n\n";
        $message .= "üì¶ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ô‡∏≥‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πà‡∏≠‡∏á";
        
        return $this->sendNotification('box_full', $message, 'high');
    }
    
    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á
    public function notifyBoxOpened($mode, $trigger, $distance, $motion_detected) {
        $mode_text = $mode === 'online' ? 'üåê ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå' : 'üì± ‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå';
        $trigger_text = $trigger === 'GREEN_SWITCH' ? 'üü¢ ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß' : 'üî¥ ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏î‡∏á';
        $motion_text = $motion_detected ? '‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö' : '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö';
        
        $message = "üîì <b>‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î</b>\n\n";
        $message .= "üéØ ‡πÇ‡∏´‡∏°‡∏î: {$mode_text}\n";
        $message .= "üéõÔ∏è ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏õ‡∏¥‡∏î: {$trigger_text}\n";
        $message .= "üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: <code>{$distance} ‡∏ã‡∏°.</code>\n";
        $message .= "üö∂ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß: {$motion_text}\n";
        $message .= "‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: <code>" . date('Y-m-d H:i:s') . "</code>";
        
        return $this->sendNotification('box_opened', $message, 'normal');
    }
    
    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    public function notifyBoxClosed($duration, $distance) {
        $message = "üîí <b>‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</b>\n\n";
        $message .= "‚è±Ô∏è ‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡πâ‡∏≤‡∏á: <code>{$duration} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</code>\n";
        $message .= "üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: <code>{$distance} ‡∏ã‡∏°.</code>\n";
        $message .= "‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: <code>" . date('Y-m-d H:i:s') . "</code>";
        
        return $this->sendNotification('box_closed', $message, 'low');
    }
    
    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
    public function notifyMotionDetected($distance, $lamp_status) {
        $message = "üö∂ <b>‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß</b>\n\n";
        $message .= "üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: <code>{$distance} ‡∏ã‡∏°.</code>\n";
        $message .= "üí° ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏ü: <code>{$lamp_status}</code>\n";
        $message .= "‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: <code>" . date('Y-m-d H:i:s') . "</code>";
        
        return $this->sendNotification('motion_detected', $message, 'low');
    }
    
    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
    public function notifySensorError($error_count, $error_type) {
        $message = "‚ö†Ô∏è <b>‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå</b>\n\n";
        $message .= "üîß ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: <code>{$error_type}</code>\n";
        $message .= "üî¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á: <code>{$error_count}</code>\n";
        $message .= "‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: <code>" . date('Y-m-d H:i:s') . "</code>\n\n";
        $message .= "üõ†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå";
        
        return $this->sendNotification('sensor_error', $message, 'high');
    }
    
    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå/‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå
    public function notifySystemStatus($status, $uptime = null, $wifi_signal = null) {
        $status_icon = $status === 'online' ? 'üü¢' : 'üî¥';
        $status_text = $status === 'online' ? '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå' : '‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå';
        
        $message = "{$status_icon} <b>‡∏£‡∏∞‡∏ö‡∏ö: {$status_text}</b>\n\n";
        $message .= "‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: <code>" . date('Y-m-d H:i:s') . "</code>\n";
        
        if ($uptime) {
            $message .= "üïê Uptime: <code>{$uptime} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</code>\n";
        }
        
        if ($wifi_signal) {
            $message .= "üì∂ ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì WiFi: <code>{$wifi_signal} dBm</code>\n";
        }
        
        $priority = $status === 'online' ? 'normal' : 'high';
        
        return $this->sendNotification('system_status', $message, $priority);
    }
    
    // ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
    public function sendDailyReport($stats) {
        $message = "üìä <b>‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô</b>\n";
        $message .= "üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: <code>" . date('Y-m-d') . "</code>\n\n";
        
        $message .= "üì¶ <b>‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:</b>\n";
        $message .= "‚Ä¢ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: <code>{$stats['total_operations']} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</code>\n";
        $message .= "‚Ä¢ ‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå: <code>{$stats['online_operations']} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</code>\n";
        $message .= "‚Ä¢ ‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå: <code>{$stats['offline_operations']} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</code>\n";
        $message .= "‚Ä¢ ‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: <code>{$stats['auto_closes']} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</code>\n\n";
        
        if (isset($stats['avg_distance'])) {
            $message .= "üìè <b>‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå:</b>\n";
            $message .= "‚Ä¢ ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: <code>" . number_format($stats['avg_distance'], 1) . " ‡∏ã‡∏°.</code>\n";
            $message .= "‚Ä¢ ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î: <code>" . number_format($stats['min_distance'], 1) . " ‡∏ã‡∏°.</code>\n";
            $message .= "‚Ä¢ ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: <code>" . number_format($stats['max_distance'], 1) . " ‡∏ã‡∏°.</code>\n";
            $message .= "‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß: <code>{$stats['motion_detections']} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</code>\n";
        }
        
        return $this->sendNotification('daily_report', $message, 'low');
    }
    
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    private function formatMessage($type, $message, $priority) {
        $priority_icons = [
            'low' => 'üíô',
            'normal' => 'üíõ', 
            'high' => '‚ù§Ô∏è',
            'critical' => 'üö®'
        ];
        
        $icon = $priority_icons[$priority] ?? 'üìã';
        
        $header = "üè† <b>Smart Parcel Box</b> {$icon}\n";
        $header .= "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
        
        $footer = "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
        $footer .= "ü§ñ ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥";
        
        return $header . $message . $footer;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Cooldown
    private function isInCooldown($type) {
        if (!isset($this->last_notification_time[$type])) {
            return false;
        }
        
        $time_diff = time() - $this->last_notification_time[$type];
        return $time_diff < $this->notification_cooldown;
    }
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    private function logNotification($type, $message, $result) {
        try {
            $status = 'failed';
            $telegram_message_id = null;
            $error_message = null;
            
            if ($result && is_array($result)) {
                foreach ($result as $chat_result) {
                    if ($chat_result && isset($chat_result['ok']) && $chat_result['ok']) {
                        $status = 'sent';
                        $telegram_message_id = $chat_result['result']['message_id'] ?? null;
                        break;
                    } else {
                        $error_message = $chat_result['description'] ?? 'Unknown error';
                    }
                }
            }
            
            $query = "INSERT INTO telegram_notifications 
                     (notification_type, message, status, telegram_message_id, error_message) 
                     VALUES (:type, :message, :status, :msg_id, :error)";
            
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':type', $type);
            $stmt->bindParam(':message', $message);
            $stmt->bindParam(':status', $status);
            $stmt->bindParam(':msg_id', $telegram_message_id);
            $stmt->bindParam(':error', $error_message);
            
            $stmt->execute();
            
        } catch (Exception $e) {
            error_log("Error logging Telegram notification: " . $e->getMessage());
        }
    }
    
    // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    public function enableNotifications($enable = true) {
        $this->notifications_enabled = $enable;
    }
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Cooldown
    public function setCooldown($seconds) {
        $this->notification_cooldown = $seconds;
    }
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    public function testNotification() {
        $message = "üß™ <b>‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</b>\n\n";
        $message .= "‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö Telegram ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥\n";
        $message .= "‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö: <code>" . date('Y-m-d H:i:s') . "</code>";
        
        return $this->telegram->sendToMultiple($message);
    }
    
    // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    public function getNotificationStats($days = 7) {
        try {
            $query = "SELECT 
                        notification_type,
                        status,
                        COUNT(*) as count,
                        MAX(timestamp) as last_sent
                      FROM telegram_notifications 
                      WHERE timestamp >= DATE_SUB(NOW(), INTERVAL :days DAY)
                      GROUP BY notification_type, status
                      ORDER BY notification_type, status";
            
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':days', $days, PDO::PARAM_INT);
            $stmt->execute();
            
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
            
        } catch (Exception $e) {
            error_log("Error getting notification stats: " . $e->getMessage());
            return [];
        }
    }
}
?>